[versions]
apache-avro = "1.12.0"
apache-commons-lang3 = "3.17.0"
api-adt4 = "3.0.184-SNAPSHOT"
assignment-api-external = "2.0.96"
assignment-api-internal = "24.2.347"
avro = "1.9.1"
awaitility-kotlin = "4.2.2"
caffeine = "3.1.8"
codegen-jooq = "9.0"
codegen-tranop = "2.3.47"
confluent = "7.8.0"
embedded-database-spring-test = "2.6.0"
embedded-postgres = "2.1.0"
flyway = "11.3.1"
geo-json-jackson = "1.14"
geo-json-rdp = "4.1.1"
gradle-git = "5.3.0"
h2 = "2.3.232"
jackson = "2.18.2"
jakarta-xml-bind = "4.0.2"
jooq = "3.19.18"
junit = "5.11.0"
kafka = "3.9.0"
kotlin = "2.1.10"
kotlin-ktlint = "12.1.2"
koltin-ktlint-pintrest = "1.5.0"
kotlin-test = "2.1.10"
kotlinx = "1.10.1"
logstash-logback = "8.0"
okhttp-mock-server = "4.12.0"
openapi-generator = "7.6.0"
postgres-embedded = "15.5.0"
postgres-jdbc = "42.7.5"
rdp-insight = "0.2.11"
rdp-json-utils = "2.0.2"
rest-assured = "5.5.0"
shedlock = "6.2.0"
snakeyaml = "2.2"
spring-boot = "3.4.3"
spring-dependencies = "1.1.7"
spring-kafka = "3.3.2"
test-logger = "4.0.0"
tranop-insight = "2.0.60"
tranop-json-utils = "1.5.21"
versions = "0.52.0"

[bundles]
kafka = [
    "kafka-clients",
    "kafka-streams",
    "spring-kafka",
]
kafka-test = [
    "kafka",
    "kafka-metadata",
    "kafka-server-common",
    "kafka-storage",
    "kafka-storage-api",
    "spring-kafka-test",
]
jackson = [
    "jackson-annotations",
    "jackson-core",
    "jackson-databind",
    "jackson-dataformat-yaml",
    "jackson-kotlin",
]
json-utils = [
    "geo-json-jackson",
    "geo-json-rdp",
    "rdp-json-utils",
]
avro = [
    "apache-avro",
    "kafka-avro-serde",
    "kafka-schema-registry-client"
]
db-jooq-codegen = [
    "jooq-codegen",
    "jooq-codegen-h2",
    "jooq-codegen-jaxb",
    "jooq-codegen-meta",
]
db-shedlock = [
    "db-shedlock-spring",
    "db-shedlock-spring-jdbc",
]
db-postgres-zonky = [
    "db-postgres-zonky",
    "db-postgres-zonky-binaries",
    "db-postgres-zonky-spring-test",
]
logging = [
    "logstash-logback",
    "micrometer",
    "spring-boot-starter-actuator",
    "spring-boot-starter-logging",
    "rdp-insight"
]
spring-boot-starters = [
    "spring-boot-starter",
    "spring-boot-starter-jooq",
    "spring-boot-starter-security",
    "spring-boot-starter-web",
    "spring-boot-starter-webflux",
]
test-junit = [
    "junit",
    "junit-kotlin-test",
    "junit-params",
]
test-rest-assured = [
    "rest-assured",
    "rest-assured-kotlin",
]
kotlinx = [
    "kotlinx-core",
    "kotlinx-reactor",
]
tranop-models = [
    "assignment-api-internal",
    "assignment-api-external",
]

[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
kotlin-ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "kotlin-ktlint" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependencies = { id = "io.spring.dependency-management", version.ref = "spring-dependencies" }
versions = { id = "com.github.ben-manes.versions", version.ref = "versions" }
test-logger = { id = "com.adarshr.test-logger", version.ref = "test-logger" }
codegen-jooq = { id = "nu.studer.jooq", version.ref = "codegen-jooq" }
codegen-openapi = { id = "org.openapi.generator", version.ref = "openapi-generator" }
codegen-tranop = { id = "no.ruter.tranop.tranop-codegen-gradle-plugin", version.ref = "codegen-tranop" }
avro = { id = "com.github.davidmc24.gradle.plugin.avro", version.ref = "avro" }
grgit = { id = "org.ajoberstar.grgit", version.ref = "gradle-git" }

[libraries]
gradle-git = { module = "org.ajoberstar.grgit:org.ajoberstar.grgit.gradle.plugin", version.ref = "gradle-git" }
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlinx-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx" }
kotlinx-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinx" }
kotlin-availabilty = { module = "org.awaitility:awaitility-kotlin", version.ref = "awaitility-kotlin" }
jooq-codegen = { module = "org.jooq:jooq-codegen", version.ref = "jooq" }
jooq-codegen-h2 = { module = "com.h2database:h2", version.ref = "h2" }
jooq-codegen-meta = { module = "org.jooq:jooq-meta-extensions", version.ref = "jooq" }
jooq-codegen-jaxb = { module = "jakarta.xml.bind:jakarta.xml.bind-api", version.ref = "jakarta-xml-bind" }
cache-caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version.ref = "caffeine" }
apache-commons-lang3 = { module = "org.apache.commons:commons-lang3", version.ref = "apache-commons-lang3" }
spring-boot-starter = { module = "org.springframework.boot:spring-boot-starter", version.ref = "spring-boot" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot" }
spring-boot-starter-jooq = { module = "org.springframework.boot:spring-boot-starter-jooq", version.ref = "spring-boot" }
spring-boot-starter-logging = { module = "org.springframework.boot:spring-boot-starter-logging", version.ref = "spring-boot" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security", version.ref = "spring-boot" }
spring-boot-starter-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux", version.ref = "spring-boot" }
spring-boot-test-starter = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring-boot" }
spring-boot-config-processor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "spring-boot" }
snakeyaml = { module = "org.yaml:snakeyaml", version.ref = "snakeyaml" }
openapi-generator = { module = "org.openapitools:openapi-generator-gradle-plugin", version.ref = "openapi-generator" }
codegen-tranop = { module = "no.ruter.tranop.tranop-codegen-gradle-plugin:no.ruter.tranop.tranop-codegen-gradle-plugin.gradle.plugin", version.ref = "codegen-tranop" }
rdp-insight = { module = "no.ruter.rdp.insight:rdp-insight", version.ref = "rdp-insight" }
rdp-json-utils = { module = "no.ruter.rdp.common:rdp-json-utils", version.ref = "rdp-json-utils" }
jackson-core = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "jackson" }
jackson-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "jackson" }
jackson-dataformat-yaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
assignment-api-internal = { module = "no.ruter.tranop:assignment-api-internal", version.ref = "assignment-api-internal" }
assignment-api-external = { module = "no.ruter.tranop:assignment-api-external", version.ref = "assignment-api-external" }
api-adt4 = { module = "no.ruter.tranop:assignment-adt-v4-api-model", version.ref = "api-adt4" }
kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka" }
kafka-streams = { module = "org.apache.kafka:kafka-streams", version.ref = "kafka" }
kafka-schema-registry-client = { module = "io.confluent:kafka-schema-registry-client", version.ref = "confluent" }
kafka = { module = "org.apache.kafka:kafka_2.13", version.ref = "kafka" }
kafka-metadata = { module = "org.apache.kafka:kafka-metadata", version.ref = "kafka" }
kafka-storage = { module = "org.apache.kafka:kafka-storage", version.ref = "kafka" }
kafka-storage-api = { module = "org.apache.kafka:kafka-storage-api", version.ref = "kafka" }
kafka-server-common = { module = "org.apache.kafka:kafka-server-common", version.ref = "kafka" }
spring-kafka = { module = "org.springframework.kafka:spring-kafka", version.ref = "spring-kafka" }
spring-kafka-test = { module = "org.springframework.kafka:spring-kafka-test", version.ref = "spring-kafka" }
junit = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
junit-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit" }
junit-kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin-test" }
rest-assured = { module = "io.rest-assured:rest-assured", version.ref = "rest-assured" }
rest-assured-kotlin = { module = "io.rest-assured:kotlin-extensions", version.ref = "rest-assured" }
micrometer = { module = "io.micrometer:micrometer-registry-prometheus" }
logstash-logback = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash-logback" }
geo-json-rdp = { module = "no.ruter.rdp:rdp-geojson", version.ref = "geo-json-rdp" }
geo-json-jackson = { module = "de.grundid.opendatalab:geojson-jackson", version.ref = "geo-json-jackson" }
db-flyway = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
db-postgres-jdbc = { module = "org.postgresql:postgresql", version.ref = "postgres-jdbc" }
db-postgres-flyway = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }
db-postgres-zonky = { module = "io.zonky.test:embedded-postgres", version.ref = "embedded-postgres" }
db-postgres-zonky-spring-test = { module = "io.zonky.test:embedded-database-spring-test", version.ref = "embedded-database-spring-test" }
db-postgres-zonky-binaries = { module = "io.zonky.test.postgres:embedded-postgres-binaries-linux-arm64v8" }
db-postgres-zonky-binaries-bom = { module = "io.zonky.test.postgres:embedded-postgres-binaries-bom", version.ref = "postgres-embedded" }
db-shedlock-spring = { module = "net.javacrumbs.shedlock:shedlock-spring", version.ref = "shedlock" }
db-shedlock-spring-jdbc = { module = "net.javacrumbs.shedlock:shedlock-provider-jdbc-template", version.ref = "shedlock" }
okhttp-mock-server = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp-mock-server" }
apache-avro = { module = "org.apache.avro:avro", version.ref = "apache-avro" }
kafka-avro-serde = { module = "io.confluent:kafka-streams-avro-serde", version.ref = "confluent" }
